import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class GlSharedComponentInputAutocompleteSimpleService {
    constructor() {
        this.autocompleteList$ = new Subject();
        this.autocompleteReset$ = new Subject();
        this.autocompleteLoaded$ = new Subject();
        this.autocompleteUpdateValue$ = new Subject();
    }
    ngOnDestroy() {
        this.autocompleteList$.observers.map(x => x.complete());
        this.autocompleteLoaded$.observers.map(x => x.complete());
        this.autocompleteReset$.observers.map(x => x.complete());
        this.autocompleteUpdateValue$.observers.map(x => x.complete());
    }
}
GlSharedComponentInputAutocompleteSimpleService.ɵprov = i0.ɵɵdefineInjectable({ factory: function GlSharedComponentInputAutocompleteSimpleService_Factory() { return new GlSharedComponentInputAutocompleteSimpleService(); }, token: GlSharedComponentInputAutocompleteSimpleService, providedIn: "root" });
GlSharedComponentInputAutocompleteSimpleService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
GlSharedComponentInputAutocompleteSimpleService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2wtc2hhcmVkLWNvbXBvbmVudC1pbnB1dC1hdXRvY29tcGxldGUtc2ltcGxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9nbC1uZy1mcm9udGVuZC9zcmMvbGliL3NoYXJlZC9jb21wb25lbnQvaW5wdXQvYXV0b2NvbXBsZXRlL3NpbXBsZS9nbC1zaGFyZWQtY29tcG9uZW50LWlucHV0LWF1dG9jb21wbGV0ZS1zaW1wbGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBTy9CLE1BQU0sT0FBTywrQ0FBK0M7SUFNMUQ7UUFMQSxzQkFBaUIsR0FBK0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM5RCx1QkFBa0IsR0FBcUMsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNyRSx3QkFBbUIsR0FBcUIsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUN0RCw2QkFBd0IsR0FBbUMsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUUxRCxDQUFDO0lBRWhCLFdBQVc7UUFDVCxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsd0JBQXdCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Ozs7WUFoQkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgSVJlc2V0QXV0b2NvbXBsZXRlVmFsdWUsIElTZXRBdXRvY29tcGxldGVWYWx1ZSwgSVVwZGF0ZU9wdGlvbkxpc3RcclxufSBmcm9tICcuL2dsLXNoYXJlZC1jb21wb25lbnQtaW5wdXQtYXV0b2NvbXBsZXRlLXNpbXBsZS5pbnRlcmZhY2UnO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgR2xTaGFyZWRDb21wb25lbnRJbnB1dEF1dG9jb21wbGV0ZVNpbXBsZVNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gIGF1dG9jb21wbGV0ZUxpc3QkOiBTdWJqZWN0PElVcGRhdGVPcHRpb25MaXN0PiA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgYXV0b2NvbXBsZXRlUmVzZXQkOiBTdWJqZWN0PElSZXNldEF1dG9jb21wbGV0ZVZhbHVlPiA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgYXV0b2NvbXBsZXRlTG9hZGVkJDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgYXV0b2NvbXBsZXRlVXBkYXRlVmFsdWUkOiBTdWJqZWN0PElTZXRBdXRvY29tcGxldGVWYWx1ZT4gPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgdGhpcy5hdXRvY29tcGxldGVMaXN0JC5vYnNlcnZlcnMubWFwKHggPT4geC5jb21wbGV0ZSgpKTtcclxuICAgIHRoaXMuYXV0b2NvbXBsZXRlTG9hZGVkJC5vYnNlcnZlcnMubWFwKHggPT4geC5jb21wbGV0ZSgpKTtcclxuICAgIHRoaXMuYXV0b2NvbXBsZXRlUmVzZXQkLm9ic2VydmVycy5tYXAoeCA9PiB4LmNvbXBsZXRlKCkpO1xyXG4gICAgdGhpcy5hdXRvY29tcGxldGVVcGRhdGVWYWx1ZSQub2JzZXJ2ZXJzLm1hcCh4ID0+IHguY29tcGxldGUoKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==