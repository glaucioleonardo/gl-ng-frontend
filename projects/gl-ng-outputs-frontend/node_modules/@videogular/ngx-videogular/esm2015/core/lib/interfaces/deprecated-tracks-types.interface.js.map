{"version":3,"file":"deprecated-tracks-types.interface.js","sourceRoot":"","sources":["../../../../../../../libs/ngx-videogular/core/src/lib/interfaces/deprecated-tracks-types.interface.ts"],"names":[],"mappings":"","sourcesContent":["export interface AudioTrack {\n  enabled: boolean;\n  readonly id: string;\n  kind: string;\n  readonly label: string;\n  language: string;\n  readonly sourceBuffer: SourceBuffer | null;\n}\n\ndeclare var AudioTrack: {\n  prototype: AudioTrack;\n  new (): AudioTrack;\n};\n\nexport interface AudioTrackListEventMap {\n  addtrack: TrackEvent;\n  change: Event;\n  removetrack: TrackEvent;\n}\n\n/** Used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list. */\nexport interface AudioTrackList extends EventTarget {\n  readonly length: number;\n  onaddtrack: ((this: AudioTrackList, ev: TrackEvent) => any) | null;\n  onchange: ((this: AudioTrackList, ev: Event) => any) | null;\n  onremovetrack: ((this: AudioTrackList, ev: TrackEvent) => any) | null;\n  getTrackById(id: string): AudioTrack | null;\n  item(index: number): AudioTrack;\n  addEventListener<K extends keyof AudioTrackListEventMap>(\n    type: K,\n    listener: (this: AudioTrackList, ev: AudioTrackListEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener<K extends keyof AudioTrackListEventMap>(\n    type: K,\n    listener: (this: AudioTrackList, ev: AudioTrackListEventMap[K]) => any,\n    options?: boolean | EventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions\n  ): void;\n  [index: number]: AudioTrack;\n}\n\ndeclare var AudioTrackList: {\n  prototype: AudioTrackList;\n  new (): AudioTrackList;\n};\n\n/** A single video track from a <video> element. */\nexport interface VideoTrack {\n  readonly id: string;\n  kind: string;\n  readonly label: string;\n  language: string;\n  selected: boolean;\n  readonly sourceBuffer: SourceBuffer | null;\n}\n\ndeclare var VideoTrack: {\n  prototype: VideoTrack;\n  new (): VideoTrack;\n};\n\nexport interface VideoTrackListEventMap {\n  addtrack: TrackEvent;\n  change: Event;\n  removetrack: TrackEvent;\n}\n\n/** Used to represent a list of the video tracks contained within a <video> element, with each track represented by a separate VideoTrack object in the list. */\nexport interface VideoTrackList extends EventTarget {\n  readonly length: number;\n  onaddtrack: ((this: VideoTrackList, ev: TrackEvent) => any) | null;\n  onchange: ((this: VideoTrackList, ev: Event) => any) | null;\n  onremovetrack: ((this: VideoTrackList, ev: TrackEvent) => any) | null;\n  readonly selectedIndex: number;\n  getTrackById(id: string): VideoTrack | null;\n  item(index: number): VideoTrack;\n  addEventListener<K extends keyof VideoTrackListEventMap>(\n    type: K,\n    listener: (this: VideoTrackList, ev: VideoTrackListEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener<K extends keyof VideoTrackListEventMap>(\n    type: K,\n    listener: (this: VideoTrackList, ev: VideoTrackListEventMap[K]) => any,\n    options?: boolean | EventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions\n  ): void;\n  [index: number]: VideoTrack;\n}\n\ndeclare var VideoTrackList: {\n  prototype: VideoTrackList;\n  new (): VideoTrackList;\n};\n"]}